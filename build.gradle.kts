/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.3/samples
 */

import java.nio.file.Files

tasks.register<Exec>("genMarkdown") {
    logger.info("Generating Markdown CV version")
    group = "CV generation"
    description = "Generates Markdown CV version."

    // Store target directory into a variable to avoid project reference in the configuration cache
    val directory = file("build/markdown")

    doFirst {
        Files.createDirectories(directory.toPath())
    }
    commandLine("./tools/jinja2-render", "-y", "fluz.yml",
                "-o", "build/markdown/cv.md", 
                "markdown/cv.md.jinja"
                )
}

tasks.register<Exec>("genMarkdownHtml") {
    logger.info("Generating Markdown HTML CV version")
    group = "CV generation"
    description = "Generates Markdown HTML CV version."
    dependsOn("genMarkdown")

    commandLine("pandoc", "-f", "markdown", "-t", "html", 
                "--metadata", "title='Fernando Luz'", "-s", 
                "--template", "pandoc-bootstrap/template.html", "--css", "pandoc-bootstrap/template.css",
                "-o", "build/markdown/cv.html", 
                "build/markdown/cv.md")

}

tasks.register<Exec>("genMarkdownTxt") {
    logger.info("Generating Markdown TXT CV version")
    group = "CV generation"
    description = "Generates Markdown TXT CV version."
    dependsOn("genMarkdown")

    commandLine("pandoc", "-f", "markdown", "-t", "plain", 
                "-V", "'title:Fernando Luz'", "-s", 
                "-o", "build/markdown/cv.txt", 
                "build/markdown/cv.md")

}

tasks.register<Exec>("_europassTex") {
    logger.info("Generation Europass CV [tex]")
    group = "CV helper"
    description = "Generates Europass LaTex CV version."

    // Store target directory into a variable to avoid project reference in the configuration cache
    val directory = file("build/europasscv")

    doFirst {
        Files.createDirectories(directory.toPath())
    }
    commandLine("./tools/jinja2-render", "-y", "fluz.yml", 
                "-o", "build/europasscv/cv.tex", 
                "europasscv/cv.tex.jinja")

}

tasks.register<Copy>("_copyEuropassCls") {
    logger.info("Generation Europass CV [pdf]")
    group = "CV helper"
    description = "copy necessary files to compile Europass CV Pdf"

    from(file("europasscv/europasscv.cls"))
    into("build/europasscv/europasscv.cls")
}

tasks.register<Exec>("genEuropassPdf") {
    logger.info("Generation Europass CV [pdf]")
    group = "CV generation"
    description = "Generates Europass Pdf CV version."
    dependsOn("_europassTex","_copyEuropassCls")

    commandLine("./tools/cddo", "build/europasscv/cv.tex", "${project.rootDir}/tools/latexer")
}

tasks.register<Copy>("_copyDevResumeAssets") {
    logger.info("Helper function to DevResume")
    group = "CV helper"
    description = "copy necessary files execute DevResume view"

    from(file("Assets"))
    into("build/Assets")
}

tasks.register<Exec>("genDevResume") {
    logger.info("Generating DevResume")
    group = "CV generation"
    description = "Generates DevResume CV version."
    dependsOn("_copyDevResumeAssets")

    // Store target directory into a variable to avoid project reference in the configuration cache
    val directory = file("build/DevResume")

    doFirst {
        Files.createDirectories(directory.toPath())
    }
    commandLine("./tools/jinja2-render", "-y", "fluz.yml",
                "-o", "build/DevResume/index.html", 
                "DevResume/cv.html.jinja")
}

tasks.register<Exec>("genCeeVee") {
    logger.info("Generating CeeVee")
    group = "CV generation"
    description = "Generates CeeVee CV version."

    // Store target directory into a variable to avoid project reference in the configuration cache
    val directory = file("build/ceevee")

    doFirst {
        Files.createDirectories(directory.toPath())
    }
    commandLine("./tools/jinja2-render", "-y", "fluz.yml",
                "-o", "build/ceevee/index.html", 
                "ceevee/cv.html.jinja")
}

tasks.register<Exec>("_modernCVClassicTex") {
    logger.info("Generating Modern CV Classic")
    group = "CV helper"
    description = "Generates Modern CV Classic LaTex version."

    // Store target directory into a variable to avoid project reference in the configuration cache
    val directory = file("build/moderncvclassic")

    doFirst {
        Files.createDirectories(directory.toPath())
    }
    commandLine("./tools/jinja2-render", "-y", "fluz.yml",
                "-o", "build/moderncvclassic/cv.tex", 
                "moderncvclassic/cv.tex.jinja")

}

tasks.register<Exec>("genModernCVClassicPdf") {
    logger.info("Generation Modern CV Classic [pdf]")
    group = "CV generation"
    description = "Generates Modern CV Classic Pdf version."

    dependsOn("_modernCVClassicTex")

    commandLine("./tools/cddo", "build/moderncvclassic/cv.tex", "${project.rootDir}/tools/latexer")
}

tasks.register("cvAll") {
    logger.info("Generation All versions")
    group = "CV generation"
    description = "Generates all versions."

    dependsOn(provider {
        tasks.filter { task -> task.name.startsWith("gen") }
    })
}
